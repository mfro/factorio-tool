{"version":3,"file":"main.js","sources":["../src/main.ts"],"sourcesContent":["import * as zlib from 'zlib';\n\nimport data from '../../common/data/vanilla-1.0.0.json';\n\ntype Item = (typeof data.items)[keyof typeof data.items];\ntype Recipe = (typeof data.recipes)[keyof typeof data.recipes];\ntype Quantity = { name: string, amount: number };\n\nconst disabled = new Set([\n  'loader', 'fast-loader', 'express-loader',\n  'small-plane',\n  'player-port',\n  'electric-energy-interface',\n  'railgun', 'railgun-dart',\n]);\n\ninterface Group {\n  name: string;\n  order: string\n  subgroups: Subgroup[];\n}\n\ninterface Subgroup {\n  name: string;\n  order: string;\n  items: { item: Item, recipe: Recipe }[];\n}\n\nlet groups: Group[] = [];\nlet all_items = Object.keys(data.items).map(k => data.items[k as keyof typeof data.items]);\nlet all_recipes = Object.keys(data.recipes).map(k => data.recipes[k as keyof typeof data.recipes]);\n\nfor (let id in data.groups) {\n  let raw = data.groups[id as keyof typeof data.groups];\n  let subgroups = [];\n  for (let id2 in raw.subgroups) {\n    let raw2: string = raw.subgroups[id2 as keyof typeof raw.subgroups];\n\n    let items = all_items.filter(item => {\n      return item.group == id && item.subgroup == id2\n        && item.type != 'fluid';\n    }).map(item => {\n      let recipes = all_recipes.filter(a => {\n        return a.results.length == 1\n          && a.results[0].name == item.name\n          && !disabled.has(a.name);\n      })!;\n\n      let recipe = recipes.length == 1 ? recipes[0] : null!;\n      return { item, recipe };\n    }).filter(pair => {\n      return pair.recipe != null;\n    });\n\n    if (items.length == 0)\n      continue;\n\n    items.sort((a, b) => a.recipe.order.localeCompare(b.recipe.order));\n\n    subgroups.push({\n      name: id2,\n      order: raw2,\n      items: items,\n    });\n  }\n\n  if (subgroups.length == 0)\n    continue;\n\n  subgroups.sort((a, b) => a.order.localeCompare(b.order));\n\n  groups.push({\n    name: id,\n    order: raw.order,\n    subgroups: subgroups,\n  });\n}\n\ngroups.sort((a, b) => a.order.localeCompare(b.order));\n\nconst outputs = [\n  'automation-science-pack',\n  'logistic-science-pack',\n  'military-science-pack',\n  'chemical-science-pack',\n  'production-science-pack',\n  'utility-science-pack',\n];\n\nconst inputs = [\n  'coal',\n  'stone',\n\n  'iron-plate',\n  'copper-plate',\n  // 'steel-plate',\n  // 'stone-brick',\n\n  // 'rocket-fuel',\n  'sulfuric-acid',\n  'lubricant',\n  'petroleum-gas',\n  'water',\n];\n\nfunction base_layout() {\n  const recipes = new Map<string, Recipe | null>(inputs.map(c => [c, null]));\n  const depths = new Map(inputs.map(c => [c, 0]));\n\n  function get_recipe(name: string): Recipe | null {\n    if (recipes.has(name))\n      return recipes.get(name)!;\n\n    let recipe = all_recipes.find(r => r.results.length == 1 && r.results[0].name == name);\n    if (recipe == null) throw new Error('no recipe: ' + name);\n    recipes.set(name, recipe);\n\n    for (let ingredient of recipe.ingredients) {\n      get_recipe(ingredient.name);\n    }\n\n    return recipe;\n  }\n\n  function get_depth(name: string): number {\n    if (depths.has(name))\n      return depths.get(name)!;\n\n    let recipe = recipes.get(name);\n    if (recipe == null) throw new Error('no recipe: ' + name);\n    let ingredients = (recipe.ingredients as Quantity[]);\n\n    let input_count = ingredients.reduce((sum, v) => sum + v.amount, 0);\n    let output_count = recipe.results[0].amount;\n\n    let depth;\n    if (input_count < output_count) {\n      let dependents = [...recipes.values()].filter(r => r && r.ingredients.find(i => i.name == name) != null);\n      let depths = dependents.map(d => get_depth(d!.name));\n      debugger;\n      let in_depths = ingredients.map(c => get_depth(c.name))\n      depth = 1 + in_depths.reduce((max, v) => Math.max(v, max), 0);\n    } else {\n      let in_depths = ingredients.map(c => get_depth(c.name))\n      depth = 1 + in_depths.reduce((max, v) => Math.max(v, max), 0);\n    }\n\n    depths.set(name, depth)\n\n    return depth;\n  }\n\n  for (let output of outputs) {\n    get_recipe(output);\n  }\n\n  for (let output of outputs) {\n    get_depth(output);\n  }\n\n  let bus: Quantity[] = outputs.map(name => ({ name, amount: 1350 }));\n  let max_depth = outputs.reduce((max, v) => Math.max(max, get_depth(v)), 0);\n  for (let i = max_depth; i >= 0; --i) {\n    let layer = [];\n\n    // console.log(`${i}: `);\n    for (let pair of depths) {\n      if (pair[1] != i) continue;\n      layer.push(pair[0]);\n      // console.log(`  ${pair[0]}`);\n    }\n\n    for (let name of layer) {\n      let recipe = recipes.get(name);\n      if (recipe == null) continue;\n\n      let index = bus.findIndex(q => q.name == name);\n      if (index < 0) throw new Error(`not on the bus: ${name}`);\n      let amount = bus.splice(index, 1)[0].amount;\n\n      let ratio = amount / recipe.results[0].amount;\n\n      for (let ingredient of recipe.ingredients) {\n        let item = all_items.find(i => i.name == ingredient.name);\n        if (item == null) throw new Error(`not an item: ${item}`);\n        if (item.type == 'fluid') continue;\n\n        let input = bus.find(q => q.name == ingredient.name);\n        if (input == null) {\n          input = { name: ingredient.name, amount: 0 };\n          bus.push(input);\n        }\n        input.amount += ingredient.amount * ratio;\n      }\n    }\n\n    let header = `${i}:`;\n    let total = 0;\n    for (let entry of bus) {\n      header += ` |${entry.name} ${entry.amount / 2700}|`;\n      total += Math.ceil(entry.amount / 2700);\n    }\n    header += ` (${total})`;\n\n    console.log(header);\n\n    for (let pair of layer) {\n      console.log(`  ${pair}`);\n    }\n  }\n}\n\nfunction load_blueprint(raw: string): Blueprint | BlueprintBook {\n  let bytes = Buffer.from(raw.substr(1), 'base64');\n  let inflated = zlib.inflateSync(bytes);\n  let object = JSON.parse(inflated.toString('utf8'));\n  if ('blueprint' in object)\n    return object['blueprint'];\n  return object['blueprint_book'];\n}\n\nfunction save_blueprint(src: Blueprint | BlueprintBook): string {\n  let object;\n  if ('blueprints' in src)\n    object = { ['blueprint_book']: src };\n  else\n    object = { ['blueprint']: src };\n\n  let inflated = Buffer.from(JSON.stringify(object), 'utf8')\n  let bytes = zlib.deflateSync(inflated, { level: 9 });\n  return '0' + bytes.toString('base64');\n}\n\nfunction robot_mall() {\n  let raw = '0eNqFkNtqwzAQRP9lnpUQB18SkT8pxciO2i7ohrQONUb/XsmB0odA33ZWe2Z2tWEyiw6RHENuoNm7BPm2IdGnU6b2eA0aEsTaQsApW1WyypiDUTYgC5C762/IJr8LaMfEpJ8uu1hHt9hJxzLwihcIPhXEu5pWbA590x47gbWUl+HYlYCyFkdvxkl/qQf5WCdnivNCPJa3+y/+QTHx+N/yy5RY7cjTu6h6/6kKG1RUXCNwQ871pJ2Wf35K4KFj2iPPl6Yd2uvQD82p7/qcfwDkxXE+';\n  let src = load_blueprint(raw);\n  console.log(JSON.stringify(src));\n\n  let assemblers: Blueprint = {\n    item: 'blueprint',\n    label: 'assmblers',\n    entities: [],\n    tiles: [],\n    icons: [],\n    schedules: [],\n    version: 281474976710656, // (1.0.0)\n  };\n\n  function connect(color: 'green' | 'red', a: Entity, b: Entity) {\n    if (!a.connections) a.connections = {};\n    if (!a.connections[1]) a.connections[1] = {};\n    if (!a.connections[1][color]) a.connections[1][color] = [];\n\n    if (!a.connections[1][color]!.find(c => c.entity_id == b.entity_number))\n      a.connections[1][color]!.push({ entity_id: b.entity_number });\n\n    if (!b.connections) b.connections = {};\n    if (!b.connections[1]) b.connections[1] = {};\n    if (!b.connections[1][color]) b.connections[1][color] = [];\n\n    if (!b.connections[1][color]!.find(c => c.entity_id == a.entity_number))\n      b.connections[1][color]!.push({ entity_id: a.entity_number });\n  }\n\n  function add_recipe(x: number, y: number, name: string) {\n    type pos = { x: number, y: number };\n    let assembler_position;\n    let power_position: pos;\n    let input_position: pos, input_inserter_position, input_inserter_direction;\n    let output_position: pos, output_inserter_position, output_inserter_direction;\n\n    if (y % 2 == 0) {\n      let x0 = 3 * x;\n      let y0 = 4.5 * y;\n      input_inserter_direction = 4;\n      output_inserter_direction = 0;\n      assembler_position = { x: x0, y: y0 };\n\n      if (x % 3 == 0) {\n        input_position = { x: x0 + 1, y: y0 + 3 };\n        input_inserter_position = { x: x0 + 1, y: y0 + 2 };\n        output_position = { x: x0, y: y0 + 3 };\n        output_inserter_position = { x: x0, y: y0 + 2 };\n        power_position = { x: x0 + 3, y: y0 + 3 };\n      } else if (x % 3 == 1) {\n        input_position = { x: 3 * x - 1, y: y0 + 3 };\n        input_inserter_position = { x: 3 * x - 1, y: y0 + 2 };\n        output_position = { x: 3 * x + 1, y: y0 + 3 };\n        output_inserter_position = { x: 3 * x + 1, y: y0 + 2 };\n        power_position = { x: x0, y: y0 + 3 };\n      } else {\n        input_position = { x: 3 * x - 1, y: y0 + 3 };\n        input_inserter_position = { x: 3 * x - 1, y: y0 + 2 };\n        output_position = { x: 3 * x, y: y0 + 3 };\n        output_inserter_position = { x: 3 * x, y: y0 + 2 };\n        power_position = { x: x0 - 3, y: y0 + 3 };\n      }\n    } else {\n      let x0 = 3 * x;\n      let y0 = 1.5 + 4.5 * y;\n      input_inserter_direction = 0;\n      output_inserter_direction = 4;\n      assembler_position = { x: x0, y: y0 };\n\n      if (x % 3 == 0) {\n        input_position = { x: x0 + 1, y: y0 - 3 };\n        input_inserter_position = { x: x0 + 1, y: y0 - 2 };\n        output_position = { x: x0, y: y0 - 3 };\n        output_inserter_position = { x: x0, y: y0 - 2 };\n        power_position = { x: x0 + 3, y: y0 - 3 };\n      } else if (x % 3 == 1) {\n        input_position = { x: 3 * x - 1, y: y0 - 3 };\n        input_inserter_position = { x: 3 * x - 1, y: y0 - 2 };\n        output_position = { x: 3 * x + 1, y: y0 - 3 };\n        output_inserter_position = { x: 3 * x + 1, y: y0 - 2 };\n        power_position = { x: x0, y: y0 - 3 };\n      } else {\n        input_position = { x: 3 * x - 1, y: y0 - 3 };\n        input_inserter_position = { x: 3 * x - 1, y: y0 - 2 };\n        output_position = { x: 3 * x, y: y0 - 3 };\n        output_inserter_position = { x: 3 * x, y: y0 - 2 };\n        power_position = { x: x0 - 3, y: y0 - 3 };\n      }\n    }\n\n    let assembler: Entity;\n    let input, input_inserter: Entity;\n    let output, output_inserter: Entity;\n\n    assemblers.entities.push(assembler = {\n      entity_number: assemblers.entities.length + 1,\n      name: 'assembling-machine-3',\n      position: assembler_position,\n      recipe: name,\n    });\n\n    input = assemblers.entities.find(p => p.name == 'logistic-chest-requester' && p.position.x == input_position.x && p.position.y == input_position.y);\n    if (input == null) {\n      assemblers.entities.push(input = {\n        entity_number: assemblers.entities.length,\n        name: 'logistic-chest-requester',\n        position: input_position,\n        request_filters: [],\n      });\n    }\n\n    output = assemblers.entities.find(p => p.name == 'logistic-chest-active-provider' && p.position.x == output_position.x && p.position.y == output_position.y);\n    if (output == null) {\n      assemblers.entities.push(output = {\n        entity_number: assemblers.entities.length,\n        name: 'logistic-chest-active-provider',\n        position: output_position,\n      });\n    }\n\n    assemblers.entities.push(input_inserter = {\n      entity_number: assemblers.entities.length + 1,\n      name: 'stack-inserter',\n      position: input_inserter_position,\n      direction: input_inserter_direction,\n    });\n\n    assemblers.entities.push(output_inserter = {\n      entity_number: assemblers.entities.length + 1,\n      name: 'fast-inserter',\n      position: output_inserter_position,\n      direction: output_inserter_direction,\n    });\n\n    let power = assemblers.entities.find(p => p.name == 'medium-electric-pole' && p.position.x == power_position.x && p.position.y == power_position.y);\n    if (power == null) {\n      assemblers.entities.push(power = {\n        entity_number: assemblers.entities.length + 1,\n        name: 'medium-electric-pole',\n        position: power_position,\n      });\n\n      assemblers.entities.push({\n        entity_number: assemblers.entities.length + 1,\n        name: 'small-lamp',\n        position: { x: power_position.x, y: power_position.y - 1 },\n      });\n\n      assemblers.entities.push({\n        entity_number: assemblers.entities.length + 1,\n        name: 'small-lamp',\n        position: { x: power_position.x, y: power_position.y + 1 },\n      });\n    }\n\n    output_inserter.override_stack_size = 1;\n    output_inserter.control_behavior = {\n      circuit_condition: {\n        first_signal: { type: 'item', name },\n        constant: 0,\n        comparator: '<'\n      },\n    };\n\n    connect('green', output_inserter, power);\n\n    let item = all_items.find(r => r.name == name);\n    let recipe = all_recipes.find(r => r.results.length == 1 && r.results[0].name == name);\n    if (item == null) throw new Error(`no item: ${name}`);\n    if (recipe == null) throw new Error(`no recipe: ${name}`);\n    for (let ingredient of recipe.ingredients) {\n      let item = all_items.find(i => i.name == ingredient.name);\n      if (item == null) throw new Error(`no item: ${ingredient.name}`);\n      if (item.type == 'fluid') {\n        assembler.direction = 2;\n        continue;\n      }\n\n      let filter = input.request_filters!.find(f => f.name == ingredient.name);\n      if (filter == null) {\n        input.request_filters!.push(filter = {\n          index: input.request_filters!.length + 1,\n          name: ingredient.name,\n          count: 0,\n        });\n      }\n\n      if ('stack_size' in item) {\n        let ratio = Math.max(1, Math.ceil(100 / recipe.energy_required));\n        filter.count += Math.min(2 * item.stack_size, ingredient.amount * ratio);\n      }\n    }\n\n    let limits = recipe.ingredients.filter(i => include.includes(i.name));\n    if (limits.length == 1) {\n      let limit = all_items.find(i => i.name == limits[0].name)!;\n      if ('stack_size' in limit && 'stack_size' in item) {\n        let count = counts.get(item.name) ?? item.stack_size * 10;\n        let limit_count = counts.get(limit.name) ?? limit.stack_size * 10;\n\n        console.log(`${item.name} (${count}) -> ${limit.name} (${limit_count})`);\n0\n        connect('green', input_inserter, power);\n        input_inserter.control_behavior = {\n          circuit_condition: {\n            first_signal: { type: 'item', name: limit.name },\n            second_signal: { type: 'item', name: item.name },\n            comparator: '>',\n          },\n        };\n      }\n    }\n  }\n\n  assemblers.icons.push({\n    index: 1,\n    signal: {\n      name: 'assembling-machine-3',\n      type: 'item',\n    }\n  })\n\n  let include = [\n    \"steel-chest\", \"storage-tank\",\n    \"transport-belt\", \"fast-transport-belt\", \"express-transport-belt\", \"underground-belt\", \"fast-underground-belt\", \"express-underground-belt\", \"splitter\", \"fast-splitter\", \"express-splitter\",\n    \"inserter\", \"long-handed-inserter\", \"fast-inserter\", \"filter-inserter\", \"stack-inserter\", \"stack-filter-inserter\",\n    \"medium-electric-pole\", \"big-electric-pole\", \"substation\", \"pipe\", \"pipe-to-ground\", \"pump\",\n    \"rail\", \"train-stop\", \"rail-signal\", \"rail-chain-signal\", \"locomotive\", \"cargo-wagon\", \"fluid-wagon\", \"artillery-wagon\",\n    \"car\", \"tank\", \"spidertron\",\n    \"logistic-chest-active-provider\", \"logistic-chest-passive-provider\", \"logistic-chest-storage\", \"logistic-chest-buffer\", \"logistic-chest-requester\", \"roboport\",\n    \"small-lamp\", \"red-wire\", \"green-wire\", \"arithmetic-combinator\", \"decider-combinator\", \"constant-combinator\", \"power-switch\", \"programmable-speaker\",\n\n    \"repair-pack\",\n    \"nuclear-reactor\", \"heat-exchanger\", \"heat-pipe\", \"steam-turbine\",\n    \"electric-mining-drill\", \"offshore-pump\", \"pumpjack\",\n    \"steel-furnace\", \"electric-furnace\",\n    \"assembling-machine-1\", \"assembling-machine-2\", \"assembling-machine-3\", \"oil-refinery\", \"chemical-plant\", \"centrifuge\", \"lab\",\n    \"beacon\",\n\n    \"pistol\", \"submachine-gun\", \"shotgun\", \"combat-shotgun\", \"rocket-launcher\", \"flamethrower\", \"land-mine\",\n    \"firearm-magazine\", \"piercing-rounds-magazine\", \"uranium-rounds-magazine\", \"shotgun-shell\", \"piercing-shotgun-shell\", \"cannon-shell\", \"explosive-cannon-shell\", \"uranium-cannon-shell\", \"explosive-uranium-cannon-shell\", \"artillery-shell\",\n    \"rocket\", \"explosive-rocket\", \"atomic-bomb\", \"flamethrower-ammo\",\n    \"grenade\", \"cluster-grenade\", \"poison-capsule\", \"slowdown-capsule\", \"defender-capsule\", \"distractor-capsule\", \"destroyer-capsule\",\n    \"light-armor\", \"heavy-armor\", \"modular-armor\", \"power-armor\", \"power-armor-mk2\",\n    \"solar-panel-equipment\", \"fusion-reactor-equipment\", \"battery-equipment\", \"battery-mk2-equipment\", \"belt-immunity-equipment\", \"exoskeleton-equipment\", \"personal-roboport-equipment\", \"personal-roboport-mk2-equipment\", \"night-vision-equipment\",\n    \"energy-shield-equipment\", \"energy-shield-mk2-equipment\", \"personal-laser-defense-equipment\", \"discharge-defense-equipment\", \"discharge-defense-remote\",\n    \"stone-wall\", \"gate\", \"gun-turret\", \"laser-turret\", \"flamethrower-turret\", \"artillery-turret\", \"artillery-targeting-remote\", \"radar\", \"rocket-silo\",\n  ];\n\n  const counts = new Map<string, number>([\n    ['nuclear-reactor', 20], ['steam-turbine', 100],\n    ['solar-panel', 2000], ['accumulator', 2000],\n    ['centrifuge', 50],\n    ['speed-module', 50], ['speed-module-2', 50], ['speed-module-3', 2000],\n    ['efficiency-module', 50], ['efficiency-module-2', 50], ['efficiency-module-3', 50],\n    ['productivity-module', 50], ['productivity-module-2', 50], ['productivity-module-3', 2000],\n    ['solar-panel-equipment', 20], ['fusion-reactor-equipment', 20], ['battery-equipment', 20], /*['battery-mk2-equipment', 20],*/['belt-immunity-equipment', 20], /*['exoskeleton-equipment', 20],*/['personal-roboport-equipment', 20], /*['personal-roboport-mk2-equipment', 20],*/['night-vision-equipment', 20],\n    ['energy-shield-equipment', 20], /*['energy-shield-mk2-equipment', 20],*/ /*['personal-laser-defense-equipment', 20],*/['discharge-defense-equipment', 20], ['discharge-defense-remote', 10],\n    ['stone-wall', 4000],\n  ]);\n\n  // let splices = [\n  //   [4, 16],\n  //   [6, 30],\n  //   [8, 44],\n  //   [86, 89],\n  // ] as const;\n\n  // for (let [from, to] of splices) {\n  //   let value = include.splice(from, 1)[0];\n  //   include.splice(to, 0, value);\n  // }\n\n  let width = 15;\n  let shifting = [];\n\n  for (let i = 0; i < include.length; ++i) {\n    let recipe = all_recipes.find(r => r.results.length == 1 && r.results[0].name == include[i]);\n    if (recipe == null) throw new Error(`no recipe: ${include[i]}`);\n\n    for (let ingredient of recipe.ingredients) {\n      let item = all_items.find(r => r.name == ingredient.name);\n      if (item == null) throw new Error(`no item: ${ingredient.name}`);\n      if (item.type != 'fluid') continue;\n\n      let name = include.splice(i, 1)[0];\n      shifting.push(name);\n      break;\n    }\n  }\n\n  let insert = width - 1;\n  for (let name of shifting) {\n    include.splice(insert, 0, name);\n    console.log(`${name} moved to ${insert}`);\n    insert += width;\n  }\n\n  let x = 0;\n  let y = -1;\n  for (let i = 0; i < include.length; ++i) {\n    if (i % width == 0) {\n      x = 0;\n      y += 1;\n    } else {\n      x += 1;\n    }\n\n    add_recipe(x, y, include[i]);\n  }\n\n  for (let a of assemblers.entities) {\n    if (a.name != 'medium-electric-pole') continue;\n\n    let b = assemblers.entities.find(e => e.position.x == a.position.x + 9 && e.position.y == a.position.y);\n    let c = assemblers.entities.find(e => e.position.x == a.position.x && e.position.y == a.position.y + 9);\n\n    // console.log(a.position, b, c);\n\n    if (b) connect('green', a, b);\n    if (c) connect('green', a, c);\n  }\n\n  let storage: Blueprint = {\n    item: 'blueprint',\n    label: 'storage',\n    entities: [],\n    tiles: [],\n    icons: [],\n    schedules: [],\n    version: 281474976710656, // (1.0.0)\n  };\n\n  storage.icons.push({\n    index: 1,\n    signal: {\n      name: 'logistic-chest-storage',\n      type: 'item',\n    }\n  });\n\n  let controls: Blueprint = {\n    item: 'blueprint',\n    label: 'controls',\n    entities: [],\n    tiles: [],\n    icons: [],\n    schedules: [],\n    version: 281474976710656, // (1.0.0)\n  };\n\n  controls.icons.push({\n    index: 1,\n    signal: {\n      name: 'constant-combinator',\n      type: 'item',\n    }\n  });\n\n  let fGroups = groups.filter(a => a.name != 'intermediate-products');\n\n  for (let i = 0; i < fGroups.length; ++i) {\n    let bump = 0;\n\n    for (let j = 0; j < fGroups[i].subgroups.length; ++j) {\n      for (let k = 0; k < fGroups[i].subgroups[j].items.length; ++k) {\n        let { item } = fGroups[i].subgroups[j].items[k];\n\n        if (k > 0 && k % 10 == 0) bump += 1;\n\n        let x = i * 11 + (k % 10);\n        let y = j + bump;\n\n        storage.entities.push({\n          entity_number: storage.entities.length + 1,\n          name: 'logistic-chest-storage',\n          position: { x, y },\n          request_filters: [{ index: 1, name: item.name, count: 0 }]\n        });\n\n        if ('stack_size' in item) {\n          let count;\n          if (counts.has(item.name))\n            count = counts.get(item.name)!;\n          else if (include.includes(item.name))\n            count = item.stack_size * 10;\n          else\n            count = 0;\n\n          // let a, b, c;\n          // controls.entities.push(a = {\n          //   entity_number: controls.entities.length + 1,\n          //   name: 'small-lamp',\n          //   position: { x: x * 2 + 1, y: y * 2 },\n          //   control_behavior: {\n          //     circuit_condition: {\n          //       first_signal: { type: 'item', name: item.name },\n          //       constant: 0,\n          //       comparator: '<',\n          //     },\n          //   },\n          // });\n          // controls.entities.push(b = {\n          //   entity_number: controls.entities.length + 1,\n          //   name: 'small-lamp',\n          //   position: { x: x * 2, y: y * 2 + 1 },\n          //   control_behavior: {\n          //     circuit_condition: {\n          //       first_signal: { type: 'item', name: item.name },\n          //       constant: 0,\n          //       comparator: '<',\n          //     },\n          //   },\n          // });\n          // controls.entities.push(c = {\n          //   entity_number: controls.entities.length + 1,\n          //   name: 'small-lamp',\n          //   position: { x: x * 2 + 1, y: y * 2 + 1 },\n          //   control_behavior: {\n          //     circuit_condition: {\n          //       first_signal: { type: 'item', name: item.name },\n          //       constant: 0,\n          //       comparator: '<',\n          //     },\n          //   },\n          // });\n\n          controls.entities.push({\n            entity_number: controls.entities.length + 1,\n            name: 'constant-combinator',\n            position: { x: x, y: y },\n            control_behavior: {\n              filters: [\n                {\n                  index: 1,\n                  signal: {\n                    type: 'item',\n                    name: item.name\n                  },\n                  count,\n                }\n              ]\n            },\n          });\n\n          // connect('green', a, c);\n          // connect('green', b, c);\n        }\n\n        if (k % 10 > 0) {\n          let a = controls.entities.find(a => a.position.x == x && a.position.y == y);\n          let b = controls.entities.find(a => a.position.x == x - 1 && a.position.y == y);\n          if (a == null || b == null) throw new Error(`? ${x} ${y} `);\n          connect('green', a, b);\n\n          // let c = controls.entities.find(a => a.position.x == x * 2 && a.position.y == y * 2 + 1);\n          // let d = controls.entities.find(a => a.position.x == x * 2 - 1 && a.position.y == y * 2 + 1);\n          // if (c == null || d == null) throw new Error(`? ${x} ${y} `);\n          // connect('green', c, d);\n        } else if (j > 0) {\n          let a = controls.entities.find(a => a.position.x == x && a.position.y == y);\n          let b = controls.entities.find(a => a.position.x == x && a.position.y == y - 1);\n          if (a == null || b == null) throw new Error(`? ${x} ${y}`);\n          connect('green', a, b);\n\n          // let c = controls.entities.find(a => a.position.x == x * 2 + 1 && a.position.y == y * 2);\n          // let d = controls.entities.find(a => a.position.x == x * 2 + 1 && a.position.y == y * 2 - 1);\n          // if (c == null || d == null) throw new Error(`? ${x} ${y} `);\n          // connect('green', c, d);\n        }\n      }\n    }\n  }\n\n  let book: BlueprintBook = {\n    item: 'blueprint-book',\n    label: 'mall',\n    blueprints: [{ index: 0, blueprint: assemblers }, { index: 1, blueprint: storage }, { index: 2, blueprint: controls }],\n    active_index: 0,\n    version: 281474976710656, // (1.0.0)\n  };\n\n  console.log(save_blueprint(book));\n}\n\nrobot_mall();\n\nexport interface BlueprintBook {\n  item: string;\n  label: string;\n  label_color?: Color;\n  blueprints: { index: number, blueprint: Blueprint }[];\n  active_index: number;\n  version: number;\n}\n\nexport interface Blueprint {\n  item: string;\n  label: string;\n  label_color?: Color;\n  entities: Entity[];\n  tiles: Tile[];\n  icons: Icon[];\n  schedules: Schedule[];\n  version: number;\n}\n\nexport interface Icon {\n  index: number;\n  signal: SignalID;\n}\n\nexport interface SignalID {\n  name: string;\n  type: 'item' | 'fluid' | 'virtual';\n}\n\nexport interface Entity {\n  entity_number: number\n  name: string;\n  position: Position;\n  direction?: number;\n  orientation?: number;\n  connections?: { [point: number]: ConnectionPoint };\n  control_behavior?: any;\n  items?: Item[];\n  recipe?: string;\n  bar?: number;\n  inventory?: Inventory;\n  infinity_settings?: InfinitySettings;\n  type?: string;\n  input_priority?: string;\n  output_priority?: string;\n  filter?: string;\n  filters?: ItemFilter[];\n  filter_mode?: string;\n  override_stack_size?: number;\n  drop_position?: Position;\n  pickup_position?: Position;\n  request_filters?: LogisticFilter[];\n  request_from_buffers?: boolean;\n  parameters?: SpeakerParameter;\n  alert_parameters?: SpeakerAlertParameter;\n  auto_launch?: boolean;\n  variation?: number;\n  color?: Color;\n  station?: string;\n}\n\nexport interface Inventory {\n  filters: ItemFilter[];\n  bar?: number;\n}\n\nexport interface Schedule {\n  schedule: ScheduleRecord[];\n  locomotives: number[];\n}\n\nexport interface ScheduleRecord {\n  station: string;\n  wait_conditions: WaitCondition[];\n}\n\nexport type WaitConditionType = 'time' | 'inactivity' | 'full' | 'empty' | 'item_count' | 'circuit' | 'robots_inactive' | 'fluid_count' | 'passenger_present' | 'passenger_not_present';\nexport type CompareType = 'and' | 'or';\nexport interface WaitCondition {\n  type: WaitConditionType;\n  compare_type: CompareType;\n  ticks?: number;\n  condition?: any;\n}\n\nexport interface Tile {\n  name: string;\n  position: Position;\n}\n\nexport interface Position {\n  x: number;\n  y: number;\n}\n\nexport interface ConnectionPoint {\n  red?: ConnectionData[];\n  green?: ConnectionData[];\n}\n\nexport interface ConnectionData {\n  entity_id: number;\n  circuit_id?: number;\n}\n\nexport interface ItemRequest {\n  [name: string]: number;\n}\n\nexport interface ItemFilter {\n  name: string;\n  index: number;\n}\n\nexport interface InfinitySettings {\n  remove_unfiltered_items: boolean;\n  filters: InfinityFilter[];\n}\n\nexport interface InfinityFilter {\n  name: string;\n  count: number;\n  mode: 'at-least' | 'at-most' | 'exactly';\n  index: number;\n}\n\nexport interface LogisticFilter {\n  name: string;\n  index: number;\n  count: number;\n}\n\nexport interface SpeakerParameter {\n  playback_volume: number;\n  playback_globally: boolean;\n  allow_polyphony: boolean;\n}\n\nexport interface SpeakerAlertParameter {\n  show_alert: boolean;\n  show_on_map: boolean;\n  icon_signal_id: SignalID;\n  alert_message: string;\n}\n\nexport interface Color {\n  r: number;\n  g: number;\n  b: number;\n  a: number;\n}\n"],"names":["groups","zlib.inflateSync","zlib.deflateSync"],"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"}